const { cmd } = require('../command');
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// remove only member
cmd({
    pattern: "removemembers",
    alias: ["kickall", "endgc", "endgroup"],
    desc: "* Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò*",
    react: "üóëÔ∏è",
    category: "group",
    filename: __filename,
}, 
async (conn, mek, m, {
    from, groupMetadata, groupAdmins, isBotAdmins, senderNumber, reply, isGroup
}) => {
    try {
        if (!isGroup) return reply("*·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs*");
        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) return reply("*·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*");
        if (!isBotAdmins) return reply("*…™ …¥·¥á·¥á·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs to ·¥ò·¥á Ä“ì·¥è Ä·¥ç ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*");

        const allParticipants = groupMetadata.participants;
        const nonAdmins = allParticipants.filter(p => !groupAdmins.includes(p.id));

        for (let p of nonAdmins) {
            try {
                await conn.groupParticipantsUpdate(from, [p.id], "remove");
                await sleep(2000);
            } catch (e) {
                console.error(`*·¥á Ä Ä·¥è Ä  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ ${p.id}:*`, e);
            }
        }

        reply("*‚òëÔ∏è ·¥Ä ü ü …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á·¥ç ô·¥á Äs  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è*");
    } catch (e) {
        console.error("Error:", e);
        reply("*‚ö†Ô∏è ·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ …¥·¥è…¥-·¥Ä·¥Ö·¥ç…™…¥s*");
    }
});

// remove only admins
cmd({
    pattern: "removeadmins",
    alias: ["kickadmins", "kickall3", "deladmins"],
    desc: "* Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü ·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò, ·¥áx·¥Ñ ü·¥ú·¥Ö…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä…¥·¥Ö  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä*",
    react: "üöÆ",
    category: "group",
    filename: __filename,
}, 
async (conn, mek, m, {
    from, isGroup, senderNumber, groupMetadata, groupAdmins, isBotAdmins, reply
}) => {
    try {
        if (!isGroup) return reply("*·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs*");
        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) return reply("*·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*");
        if (!isBotAdmins) return reply("*…™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*");

        const allParticipants = groupMetadata.participants;
        const adminParticipants = allParticipants.filter(member => 
            groupAdmins.includes(member.id) && 
            member.id !== conn.user.id && 
            member.id !== `${botOwner}@s.whatsapp.net`
        );

        for (let p of adminParticipants) {
            try {
                await conn.groupParticipantsUpdate(from, [p.id], "remove");
                await sleep(2000);
            } catch (e) {
                console.error(`*“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ${p.id}:*`, e);
            }
        }

        reply("*‚òëÔ∏è ·¥Ä ü ü ·¥Ä·¥Ö·¥ç…™…¥ ·¥ç·¥á·¥ç ô·¥á Äs (·¥áx·¥Ñ·¥á·¥ò·¥õ  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥è·¥°…¥·¥á Ä)  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è*");
    } catch (e) {
        console.error("Error:", e);
        reply("*‚ö†Ô∏è ·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ ·¥Ä·¥Ö·¥ç…™…¥s*");
    }
});

// remove admins and members both
cmd({
    pattern: "removeall2",
    alias: ["kickall2", "endgc2", "endgroup2"],
    desc: "Remove all members and admins from the group, excluding the bot and bot owner.",
    react: "üì¢",
    category: "group",
    filename: __filename,
}, 
async (conn, mek, m, {
    from, isGroup, senderNumber, groupMetadata, isBotAdmins, reply
}) => {
    try {
        if (!isGroup) return reply("*·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥Ñ·¥Ä…¥ ·¥è…¥ ü è  ô·¥á ·¥ús·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥òs*");
        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) return reply("*·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*");
        if (!isBotAdmins) return reply("*…™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*");

        const allParticipants = groupMetadata.participants;
        const participantsToRemove = allParticipants.filter(
            p => p.id !== conn.user.id && p.id !== `${botOwner}@s.whatsapp.net`
        );

        for (let p of participantsToRemove) {
            try {
                await conn.groupParticipantsUpdate(from, [p.id], "remove");
                await sleep(2000);
            } catch (e) {
                console.error(`*“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ${p.id}:*`, e);
            }
        }

        reply("*‚òëÔ∏è All ·¥ç·¥á·¥ç ô·¥á Äs (·¥áx·¥Ñ·¥á·¥ò·¥õ  ô·¥è·¥õ ·¥Ä…¥·¥Ö ·¥è·¥°…¥·¥á Ä)  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s…™ ü·¥á…¥·¥õ ü è*");
    } catch (e) {
        console.error("Error:", e);
        reply("*‚ö†Ô∏è ·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ ·¥ç·¥á·¥ç ô·¥á Äs*");
    }
});
